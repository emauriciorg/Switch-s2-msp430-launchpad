#include <msp430.h>


/*
	Col 8(P9.0)
	Col 7(P9.1)
	Col 6(P9.2)
	Col 5(P9.3)
	Col 4(P9.4)
	Col 3(P9.5)
	Col 2(P9.6)
	Col 1(P8.7)
 */


void delay(void) {
volatile unsigned loops = 500; // Start the delay counter at 25,000

while (--loops > 0); // Count down until the delay counter reaches 0
}

void set_maxtrix_columns(char columns){
	P9OUT &=~0x7f; /*clears the row port*/
	P8OUT &=~(BIT7);

	P9OUT |=columns & 0X7F;
	P8OUT |=(BIT7 & (columns&0x80));


}

struct buttons_st{
	char  up:1,
		  down:1,
		  left:1,
		  right:1;
};

struct buttons_st buttons;
void init_buttons(void){
	P2.1, P2.2, P2.3, and P2.4
	
	P2DIR&=~(BIT1 | BIT2 | BIT3 |BIT4);
	P2OUT|=(BIT1 | BIT2 | BIT3 |BIT4);
	P2REN|=(BIT1 | BIT2 | BIT3 |BIT4);

	P2IES|=(BIT1 | BIT2 | BIT3 |BIT4); /*INTERRUPT , high to low*/
	P2IE |=(BIT1 | BIT2 | BIT3 |BIT4); /*INTERRUPT , enable*/
	P2IFG = 0X00; /*INTERRUPT , clear flags*/
	
}

void enable_interrupts(){
	_BIS_SR(GIE);
	__enable_interrupt();
	__bis_SR_register(GIE);
}

#pragma vector = PORT2_VECTOR
__interrupt void Port_2(void){
	
	if (P2IFG&BIT1){ buttons.up = true;};
	if (P2IFG&BIT2){ buttons.down= true};
	if (P2IFG&BIT3){ buttons.left= true};
	if (P2IFG&BIT4){ buttons.right=true};
	
	if (buttons)
	P2IFG =0x00;
}


void main(void)
{
	unsigned char rowcnt =0; // row counter

//	unsigned char matrix[8]= { 0x01, 0x03 ,0x07 , 0x0f , 0x1f,  0x3f, 0x7f,0xff};
	unsigned char columns[8] = {} 

	WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
	PM5CTL0 &= ~LOCKLPM5; // Unlock ports from power manager

	P2DIR |= (BIT6 | BIT7);   // Make Port 2.6 and 2.7 outputs
	P2OUT &= ~(BIT6 | BIT7);  // Set ports to 0

	/*setting  the led matrix column pins as output*/


	P9DIR |= (BIT0| BIT1 |BIT2|BIT3|BIT4|BIT5|BIT6);  // P6DIR=0x7f;
	P9OUT &=~(BIT0| BIT1 |BIT2|BIT3|BIT4|BIT5|BIT6);  // P6DIR=0x7f;

	P8DIR|= (BIT7);
	P8OUT&=~(BIT7);

	/*Setting port alternate function to be I/O*/
	P9SEL0 &=~(BIT0| BIT1 |BIT2|BIT3|BIT4|BIT5|BIT6);
	P9SEL1 &=~(BIT0| BIT1 |BIT2|BIT3|BIT4|BIT5|BIT6);

	P8SEL0 &=~(BIT7);
	P8SEL1 &=~(BIT7);

	unsigned char columns = 0;
	unsigned char row_aux = 0;
	//P2OUT |= BIT6;
	while(1)// continuous loop
	{
		

		delay();

		if(P2OUT & BIT6) // If row clock 1 -> place breakpoint here
			P2OUT &= ~BIT6;  //   Set row clock 0
		else {

			if (rowcnt== 0){
				row_aux = 7;
			}else{
				row_aux =rowcnt-1;
			}

			columns = matrix[row_aux];

			if(rowcnt == 7) {// if on row 7

				P2OUT |= BIT6;  //   Set row clock and row init 1
				P2OUT |= BIT7;  //   set row init to 0

				rowcnt = 0;  //   set row counter back to 0

			} else { // for all other rows
				P2OUT |= BIT6;   //   only set row clock 1
				P2OUT &= ~BIT7;  //   set row init to 0


				rowcnt++;//   increment row counter
			}
			set_maxtrix_columns(columns);




		}

	}

}
